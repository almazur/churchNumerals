
==================== FINAL INTERFACE ====================
2018-01-21 19:52:05.5033121 UTC

interface main:Main 8022
  interface hash: a1ccbbf667df1839d8a4fddb27457960
  ABI hash: 2d42d1e06536645588fefdb90b40c1e0
  export-list hash: 2bb4b7221e947e536c4775427fa93960
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9a3e5105f4a0a75de562a948cc3c3e8c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: base-4.10.1.0* churchNumerals-0.1.0.0
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
orphans: churchNumerals-0.1.0.0:ChurchBool base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  base-4.10.1.0:System.IO 1fb8f1d116df69c8750950ac088a90e6
import  -/  churchNumerals-0.1.0.0:ChurchBool 0f67cb777beacb4c19abaf1ee4184d53
import  -/  churchNumerals-0.1.0.0:ChurchEq c01bed9ea79cc06868705addf214ebd4
import  -/  churchNumerals-0.1.0.0:ChurchNumeral d2fb40095cb4227b603cc398f93d9676
import  -/  churchNumerals-0.1.0.0:ChurchOrd 35cf69b0d6809817ee1e0571e759398e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
80c375d9daa7b0a4fe45fb25fdeaffd5
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1aebc148670fc8b3537dd46ad6a1e09c
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main17
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        ChurchBool.$fShow(->)1
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main14
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main12
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main9
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv8 } } } } }) -}
0a496d6db9ce14ba07cd1fa933026c42
  main10 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (GHC.CString.unpackCString# Main.main11)
                   GHC.Show.$fShow[]1) -}
17ca1fa5fd097d6e9f9253e7067ad34f
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("4 - 3 == 1"#) -}
de9edd9bfe2eaad20bdb99577a56729b
  main12 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$w$cshowsPrec4
                        0#
                        Main.main13
                        (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ GHC.Types.Char ww3 ww4 }) -}
4668a37a914fdf33e3602d59d8c7f418
  main13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
dcc4c981a164184b20afae211f9c9eef
  main14 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main15) -}
7ad2bc6702c050d7b1422f833d71778b
  main15 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (GHC.CString.unpackCString# Main.main16)
                   GHC.Show.$fShow[]1) -}
9fedbdaafe55ac8dd05217ce7030fa47
  main16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("signum 2"#) -}
4530a7e2602c625dc7318af5891eed49
  main17 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main18) -}
2920eda9129165599c7eed5174d745e7
  main18 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (GHC.CString.unpackCString# Main.main19)
                   GHC.Show.$fShow[]1) -}
2640913f39027bb06e5d392820d718e9
  main19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("4 < 1 ?"#) -}
5b47b6fca4d9fac3498ed6929ba8b158
  main2 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main3) -}
7d006951161d7dfe29537c0448d48497
  main20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
75cd718f194202e008bc500576c2f5cc
  main3 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   (Main.main4 ChurchBool.$fShow(->)3 ChurchBool.$fShow(->)1)
                   GHC.Show.$fShow[]1) -}
3fbd63aea55decdc1ec07324b5cb7e8d
  main4 :: [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Unfolding: (ChurchNumeral.$w$c.==
                   Main.main6
                   Main.main5
                   @ [GHC.Types.Char]) -}
41362291d4d481ac6d9be3351d2cba58
  main5 :: (a -> a) -> a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (f :: a -> a) (x :: a) -> f x) -}
9bbc3ecc787d700c7fe25713af5e34ec
  main6 :: ChurchNumeral.CNum
  {- Unfolding: (case ChurchNumeral.$w$cfromInteger
                        Main.main8 of ww { Unit# ww1 ->
                 ww1 @ ChurchNumeral.CNum ChurchNumeral.dec Main.main_four }) -}
eade2364cabc36f722319067dda0ce53
  main7 :: (a -> a) -> a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: a -> a) (eta :: a) -> x (x (x (x eta)))) -}
855deaa8bd337d844df14754256be3f6
  main8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
52968443e2856444dde707c0b6af453d
  main9 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Main.main10) -}
3aeba5fc42fd702538f0601b0cd449b8
  main_four :: ChurchNumeral.CNum
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (ChurchNumeral.CNum Main.main7) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

